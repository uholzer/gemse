<?xml version="1.0"?>

<!--
This file is part of Gemse.

Copyright 2009, 2010 Urs Holzer

Gemse is licenced under the GNU Public Licence v3 (GPL3), 
or (at your option) any later version.
-->

<overlay id="callGemseFromDocumentOverlay" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script src="const.js"/>
<script><![CDATA[
  function pickEquations(doc, reference) {
    var xpath = "(.//m:math|.//om:OMOBJ|./ancestor::m:math|./ancestor::om:OMOBJ)[not(ancestor::m:math|ancestor::om:OMOBJ)]";
    var xpathResult = doc.evaluate(xpath, reference, standardNSResolver, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);

    var mathElements = [];
    var resultNode;
    while ((resultNode = xpathResult.iterateNext())) { 
        mathElements.push({ doc: doc, element: resultNode });
    }
    return mathElements;
  }
  function editInGemse() {
    // Find the element the user clicked as he opened the popup
    var reference = gContextMenu.target;
    // Find the document
    var doc = reference.ownerDocument;

    var mathElements;
    
    // Collect Elements
    // Make distinction between these two cases
    if (gContextMenu.isContentSelected) { // If the user has made a selection
        // I do not know how to do it right, but this should work:
        // First find out the window
        var focusedWindow = document.commandDispatcher.focusedWindow;
        if (focusedWindow == window) focusedWindow = content;
        // Get its selection
        var selection = focusedWindow.getSelection();
        // Get the lower most common ancestor of the selected nodes
        var commonAncestor = selection.getRangeAt(0).commonAncestorContainer;
        // Get all equations in the subtree spanned by the
        // commonAncestor. If commonAncestor is part of an equation,
        // get its root element.
        mathElements = pickEquations(doc, commonAncestor);
        // Filter out the picked equations which are part of the selection.
        mathElements = mathElements.filter(function(m) { return selection.containsNode(m.element, true) });
    }
    else { // If the user has not made any selection
        mathElements = pickEquations(doc, reference);
    }

    function callback(editor) {
        mathElements.forEach(function(e) {
            editor.loadFromOpenDocument(e.doc, e.element);
        });
    }

    var ww = Components.classes["@mozilla.org/embedcomp/window-watcher;1"].
             getService(Components.interfaces.nsIWindowWatcher);

    // Locate the Gemse window
    var gemseWindow = ww.getWindowByName("globalGemseInstance",null);
    if (gemseWindow && gemseWindow.location != "chrome://gemse/content/editor.xul") { gemseWindow = null }

    if (gemseWindow) {
        callback(gemseWindow.editor);
    }
    else {
        // Use the wrappedJSObject trick as described in
        // https://developer.mozilla.org/en/Working_with_windows_in_chrome_code
        // in order to be able to pass arbitrary JavaScript objects.
        var arg = { onready: callback };
        arg.wrappedJSObject = arg;
        ww.openWindow(null, "chrome://gemse/content/editor.xul", "_blank",
                      "chrome,menubar,toolbar,status,resizable,dialog=no",
                      arg);
    }
  }
]]></script>

<popup id="contentAreaContextMenu">
    <menuitem id="context-editInGemse"
                    label="edit in gemse"
                    oncommand="editInGemse();"/>
<!-- Useful:
                    accesskey="&viewPartialSourceCmd.accesskey;"
-->
</popup>

</overlay>
