<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE html [
  <!ENTITY  enter  "↵">
  <!ENTITY  esc    "ESC">
  <!ENTITY  ctrl   "CRTL+">
  <!ENTITY  alt    "ALT+">
  <!ENTITY  space  "␣">
]>

<html
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:internal="http://www.andonyar.com/rec/2008-12/gemse/internalns"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xml:lang="en"
    internal:function="documentation"
>

<head>
    <title>Edit Mode</title>
    <link rel="stylesheet" href="../gemse.css" type="text/css" />
    <script src="../const.js"/>
    <script src="../editMode.js"/>
    <script src="../editMode_commandTable.js"/>
    <script src="commandListProcessing.js"/>
</head>

<body onload="modeCommands = editModeCommands; doc_init()">

<h1>Edit Mode</h1>

<div id="commands">
<h2>Commands</h2>

<table>
<thead><tr><th>Command</th><th>title</th><th>Function name</th></tr></thead>
<tbody id="commandTableBody">

</tbody>
</table>

<h3>Movements</h3>

<div class="commandDocumentation" id="editModeCommand_moveLeft">
    <h4 class="commandTitle">Move left</h4>

    <p>Moves the cursor to the previous sibling.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveRight">
    <h4 class="commandTitle">Move right</h4>

    <p>Moves the cursor to the next sibling.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveUp">
    <h4 class="commandTitle">Move to parent</h4>

    <p>Moves the cursor to the parent the current element.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveDown">
    <h4 class="commandTitle">Move to first child</h4>

    <p>Moves the cursor to the first child of the current one.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveDownLast">
    <h4 class="commandTitle">Move to last child</h4>

    <p>Moves the cursor to the last child of the current one.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveToRoot">
    <h4 class="commandTitle">Move to root</h4>

    <p>Moves the cursor to the root element, i.e. to the math
    element.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveToFirstSibling">
    <h4 class="commandTitle">Move to first sibling</h4>

    <p>Moves the cursor to the first sibling of the current
    element.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveToLastSibling">
    <h4 class="commandTitle">Move to last sibling</h4>

    <p>Moves the cursor to the last sibling of the current
    element.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveToNextLeaf">
    <h4 class="commandTitle">Move to next leaf</h4>

    <p>Moves the cursor to the next leaf.</p>

    <p>A leaf is an element that does not contain any other element.
    The most important examples for that are the <code>mi</code>, 
    <code>mo</code> and <code>mn</code> elements. Moving along leaves
    feels like moving the cursor while ignoring the structure of the
    formula.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_moveToPreviousLeaf">
    <h4 class="commandTitle">Move to previous leaf</h4>

    <p>Moves the cursor to the previous leaf.</p>
</div>

<h3>Loading, saving and exporting</h3>

<div class="commandDocumentation" id="editModeCommand_save">
    <h4 class="commandTitle">Save all</h4>

    <p>Saves the current equation. You can provide an URL or filename as parameter
    which causes the equation to be saved there.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_close">
    <h4 class="commandTitle">Close</h4>

    <p>Closes the current equation. Closing of an equation with
    unsaved changes is prevented. You can write a <kbd>!</kbd> to
    circumvent this protection.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_saveAll">
    <h4 class="commandTitle">Save all</h4>

    <p>Saves all equations.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_closeAll">
    <h4 class="commandTitle">Close all</h4>

    <p>Closes all equations which do not have unsaved changes.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_saveclose">
    <h4 class="commandTitle">Save and close</h4>

    <p>Saves and closes the equation.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_savecloseAll">
    <h4 class="commandTitle">Save and close all</h4>

    <p>Saves and closes all equations.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_export">
    <h4 class="commandTitle">Export</h4>

    <p>Exports the equation into another format. At the moment, only
    TeX is supported. The result is displayed on the screen. Exporting
    to file is not yet possible.</p>

    <p><em>Important:</em> If you want to use this feature, you first
    have to download the 
    <a href="http://www.raleigh.ru/MathML/mmltex/index.php?lang=en">XSLT MathML Library</a>.
    Put the files into the subdirectory <code>exporters/xsltml</code>
    (which you have to create first) in the directory of Gemse. Please
    also note, that this means, that you can not use this command in
    the online demo of Gemse.</p>
</div>

<h3>Working with multiple equations</h3>

<div class="commandDocumentation" id="editModeCommand_nextEquation">
    <h4 class="commandTitle">Go to next equation</h4>

    <p>If you have opened more than one equation, you can use this
    command to switch to the next equation.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_previousEquation">
    <h4 class="commandTitle">go to previous equation</h4>

    <p>If you have opened more than one equation, you can use this
    command to switch to the previous equation.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_newEquation">
    <h4 class="commandTitle">Create a new equation</h4>

    <p>Creates a new empty equation.</p>
</div>

<h3>Views and viewsets</h3>

<div class="commandDocumentation" id="editModeCommand_hideView">
    <h4 class="commandTitle">hides a view</h4>

    <p>Hides a view of the current viewset. The argument must be the
    number of the view in this viewset. Views are counted in the order
    they turn up in the XUL description of the viewset, beginning 0
    and hidden views are always counted as well.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_showView">
    <h4 class="commandTitle">show a view</h4>

    <p>Shows a previously hidden view. The argument must be the number
    of the view or <code>all</code>. In the latter case, all hidden
    views are shown again.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_chooseViewset">
    <h4 class="commandTitle">choose a viewset</h4>

    <p>Changes the viewset. The argument is the number or the name of the viewset.
    Viewsets are counted in the order they are defined in
    <code>editor.xul</code>. The first one has number 0 and is the
    default. Calling this command without argument prints a list of
    all available viewsets, including a short description for each of
    them.</p>
</div>

<h3>Various</h3>

<div class="commandDocumentation" id="editModeCommand_redisplay">
    <h4 class="commandTitle">Update display</h4>

    <p>In rare cases it may happen (perhaps because of a bug) that the
    display does not get updated. In such a case you can use this command
    to force an update of the display.</p>
</div>

<h3>Calling insert mode</h3>

<div class="commandDocumentation" id="editModeCommand_insertBefore">
    <h4 class="commandTitle">insert before</h4>

    <p>Open the insert mode such that the cursor is placed before the
    current element.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_insertAfter">
    <h4 class="commandTitle">insert after</h4>

    <p>Open the insert mode such that the cursor is placed after the
    current element.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_insertAtEnd">
    <h4 class="commandTitle">insert at end</h4>

    <p>Open the insert mode such that the cursor is placed after the
    last sibling of the curent element.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_insertAtBeginning">
    <h4 class="commandTitle">insert at beginning</h4>

    <p>Open the insert mode such that the cursor is placed before the
    first sibling</p>
</div>

<div class="commandDocumentation" id="editModeCommand_insertIn">
    <h4 class="commandTitle">insert after</h4>

    <p>Open the insert mode such that the cursor is placed into the
    current empty element. <em>The current element must be empty!</em></p>
</div>

<div class="commandDocumentation" id="editModeCommand_cycleInsertMode">
    <h4 class="commandTitle">Cycle through insert modes</h4>

    <p>Selects the insert mode that will be used for the next
    insert.</p>
</div>

<h3>Other modes</h3>

<div class="commandDocumentation" id="editModeCommand_visualMode">
    <h4 class="commandTitle">Visual</h4>

    <p>Opens the visual mode so you can make a selection and execute
    an edit mode command on it.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_attributeMode">
    <h4 class="commandTitle">Attribute mode</h4>

    <p>Opens the attribute mode so you can change the attributes of
    the current element</p>
</div>

<h3>Delete and change</h3>

<div class="commandDocumentation" id="editModeCommand_kill">
    <h4 class="commandTitle">Delete Element</h4>

    <p>Deletes the element the cursor is on.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_delete">
    <h4 class="commandTitle">Delete selection</h4>

    <p>Deletes all (by visual mode) selected elements.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_change">
    <h4 class="commandTitle">Change selection</h4>

    <p>Deletes all (by visual mode) selected elements and opens the
    insert mode.</p>
</div>

<h3>Undo and redo</h3>

<div class="commandDocumentation" id="editModeCommand_undo">
    <h4 class="commandTitle">Undo</h4>

    <p>Makes your last change undone. You can undo multiple changes.
    The <a href="#editModeCommand_redoc">redo</a> command can be 
    used to apply them again, to undo the undo, so to say.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_redo">
    <h4 class="commandTitle">Redo</h4>

    <p>Reapplies the last undone change. This is only possible if you
    have made no changes since the undo. A redo can be undone again.</p>
</div>

<h3>Structural changes</h3>

<div class="commandDocumentation" id="editModeCommand_mrowEnvelop">
    <h4 class="commandTitle">Put mrow around selection</h4>

    <p>Places an mrow element around the selected elements.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_unwrap">
    <h4 class="commandTitle">Unwrap</h4>

    <p>Removes the element and places its children at its former
    location.</p>
</div>

<h3>Help</h3>

<div class="commandDocumentation" id="editModeCommand_help">
    <h4 class="commandTitle">Help</h4>

    <p>Without any arguments, this command opens the index of the
    documentaion. If you use <q>tutorial</q> as argument, the tutorial
    gets opened directly. You can use <q>element</q> as argument to open
    the section about the element the cursor is on from the MathML 3
    specification. If you want to open the section of another element, you
    can write the name of it behind the <q>element</q> argument, for
    example <q>element mfrac</q>.</p>
</div>

<h3>Copy and paste</h3>

<div class="commandDocumentation" id="editModeCommand_copyToRegister">
    <h4 class="commandTitle">yank</h4>

    <p>Copies the selection into a register. If there is no selection,
    the element under the cursor is taken. By default, it copies to
    the default register. Another register can be used by prepending
    the command with <kbd>"x</kbd> where <code>x</code> is the name of
    the register which is always one unicode character.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_putBefore">
    <h4 class="commandTitle">Put before</h4>

    <p>Puts the contents of a register before the current element. 
    By default, it uses
    the default register. Another register can be used by prepending
    the command with <kbd>"x</kbd> where <code>x</code> is the name of
    the register which is always one unicode character.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_putAfter">
    <h4 class="commandTitle">Put after</h4>

    <p>Puts the contents of a register after the current element. 
    By default, it uses
    the default register. Another register can be used by prepending
    the command with <kbd>"x</kbd> where <code>x</code> is the name of
    the register which is always one unicode character.</p>
</div>

<div class="commandDocumentation" id="editModeCommand_putIn">
    <h4 class="commandTitle">Put in</h4>

    <p>Puts the contents of a register into the current element. 
    <em>The current element must be empty!</em>
    By default, it uses
    the default register. Another register can be used by prepending
    the command with <kbd>"x</kbd> where <code>x</code> is the name of
    the register which is always one unicode character.</p>
</div>

<h3>Options</h3>

<div class="commandDocumentation" id="editModeCommand_set">
    <h4 class="commandTitle">set an option</h4>

    <p>When you call this command with just the name of an option as
    argument, it shows you the current value of the option. For
    example
    <kbd><internal:cmdph select="b.argument=='newlineTerminated'"/> detailedErrors&enter;</kbd>
    shows you the value of the option <code>detailedErrors</code>.
    If you want to set an option, put an equal sign after the name of
    the option and then the value. For example
    <kbd><internal:cmdph select="b.argument=='newlineTerminated'"/> detailedErrors=off&enter;</kbd>
    sets the option <code>detailedErrors</code> to
    <code>off</code>.</p>

    <p>Do not place whitespaces before or
    after the equal sign that are not part of the value of the option.
    You do not need to escape special characters, since everything
    after the equal sign up to the <kbd>&enter;</kbd> is considered
    part of the option value. Currently, it is not possible to set
    an option to a value that contains newline characters. For example 
    <kbd><internal:cmdph select="b.argument=='newlineTerminated'"/> SourceView.indentation=&space;&space;&enter;</kbd>
    causes the source view to use two spaces for indentation.</p>
</div>

</div>
</body>
</html>
