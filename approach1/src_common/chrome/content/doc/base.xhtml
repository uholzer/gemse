<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE html [
  <!ENTITY  enter  "↵">
  <!ENTITY  esc    "ESC">
  <!ENTITY  ctrl   "CRTL+">
  <!ENTITY  alt    "ALT+">
  <!ENTITY  space  "␣">
]>

<html
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:internal="http://www.andonyar.com/rec/2008-12/gemse/internalns"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xml:lang="en"
    internal:function="documentation"
>

<head>
    <title>Gemse Basics</title>
    <link rel="stylesheet" href="../gemse.css" type="text/css" />
</head>

<body>

<h1>Gemse Basics</h1>

<h2>User interface</h2>

<p>Basically, it works like this: You enter a command into the input
box (which you find at the top) and as soon as the command is
complete, it gets executed and the box cleared. Many commands consist
of one character only, some are two or three characters in length and
some have arbitrary length and have to be terminated by hitting
enter. Be aware that the input box is not a normal input box as you
are familiar with. You can not use the arrow keys to move the cursor
and you can not use the backspace key to remove a wrong character you
entered. Often, one manages to mess up the input. In such a case, one
has to hit the escape key in order to clear the input field. So, the
escape key is your friend.</p>

<p>Another important concept in Gemse are the modes. Initially, Gemse
is in the edit mode. There are more modes: The attribute mode, the
visual selection mode and different insert modes. Every mode has its
own commands, so hitting a key in edit mode can have a different
meaning than hitting the same key in insert mode. Except for the edit
mode, any mode can be terminated by hitting the escape key while the
input box is empty.</p>

<h2>Accessibility</h2>

<p>First, Gemse is only useful to people who can see. On the other
hand, I want that also people can use Gemse who can see something but still are
visually impaired, for example because of color blindness. The
solution is to provide different stylesheets. In the future their will
be a monochrome stylesheet and perhaps also a black/white one.</p>

<p>Persons who have problems using a keyboard can perhaps still use
gemse. The names of the commands can be adapted. The requirement is
that the user can insert unicode characters in some way. However,
Gemse can not be used with a pointing device. (Except if you use the
pointing device to stear an on-screen keyboard which generates unicode
input for Gemse.)</p>

<div id="doc.base.input">
<h2>Input</h2>

<p>Somehow you must be able to insert all the unicode characters you
need. For example, if you need a ∀ in a formula, you must be able to
insert it. There are several ways to do that. If your keyboard has a
key for the character you need and you have configured your opperating
system correctly, you only need to press the key, of course. But what
to do if you do not have such a key? There are at least three ways:</p>

<h3>Copy and paste</h3>

<p>One way is to copy the character from somewhere else and then paste
it into the input box. But I am sure, nobody wants to do that.</p>

<h3>Input methods from the operating system</h3>

<p>The best and recommended way is to configure your operating system
so it allows you to input such characters by hitting a sequence of
keys. For example if you hit <kbd>\forall</kbd> it inserts ∀.
I do not know about Windows or Mac, but for
Linux, I can provide 
<a href="http://www.andonyar.com/rec/2008-03/mathinput/">one way to do
that</a>.
</p>

<h3>Gemse's input substitution</h3>

<p>There is another way implemented
in Gemse directly. To use it, you have first to activate it. Open the
file <code>editor.xhtml</code> and watch out for the line containing
<code><![CDATA[<script src="inputSubstitution/core.js"/>]]></code>. If it is
commented out, i.e. if it is surrounded by <code>&lt;!--</code> and
<code>--&gt;</code>, you must remove those comment signs. It may be
that the comment signs are not there from the beginning, in this case
you do not need to change this file. The first
line below shows how it may look like and the second one how it has to
look like afterwards:</p>

<pre><![CDATA[<!-- <script src="inputSubstitution/core.js"/> -->]]></pre>
<pre><![CDATA[<script src="inputSubstitution/core.js"/>]]></pre>

<p>Save the file and open <code>inputSubstitution/core.js</code>. At
the beginning of the file, set <code>inputSubstitutionActive</code>
to <code>true</code> if it not already is. This means that you must replace
<code>inputSubstitutionActive = false;</code> with
<code>inputSubstitutionActive = true;</code>. Now you are ready to use
the input substitution feature of Gemse.</p>

<p>The input substitution allows you to enter a character by
its unicode codepoint. Additionally, it allows you to enter characters
by name using an internal lookup table, called the input substitution table.
By default, this table is created by importing the names from the file
<code>inputSubstitution/w3centities-f.ent</code> which is a copy of
<a href="http://www.w3.org/2003/entities/2007/w3centities-f.ent">the
large set of DTD entity declarations</a>
out of the (at time of writing) working draft of the W3C about 
<a href="http://www.w3.org/TR/xml-entity-names/">XML Entity
Definitions</a>. If you want to extend this table, you can add more
entries into the object <code>inputSubstitutionTable</code> at the
beginning of the file <code>inputSubstitution/core.js</code>.</p>

<p>The actual substitution works similarly to XML entities. First you
have to insert a <code>&amp;</code>. Then you have two chioces. The
first is to enter <code>#x</code> followed by the codepoint (in
hexadecimal notation) of the character you need. The second is to
enter its name as it is defined in the substitution table. In any way,
you have to terminate with a <code>;</code>. If Gemse does not know
what todo with your input (for example because you entered a name not
present in the substitution table), your input simply gets removed
without placing a character, so you can try again.</p>

<p>To clarify the whole procedure, here some examples:
<code>&amp;alpha;</code> becomes <code>α</code>.
<code>&amp;#x03b1;</code> yields <code>α</code> too. If you need a
<code>∉</code>, use <code>&amp;notin;</code> or <code>&amp;#x2209;</code>.</p>

</div>

<h2>Installation</h2>

<p>Gemse requires Mozilla. That means, you either need Firefox 3 or
you have to use XULRunner 1.9.</p>

<p>Basically, there are three variants how to use Gemse.</p>

<h3>Unprivileged in Firefox</h3>

<p>For this variant you need at least Firefox 3. Run the demo on
Gemse's website or download the minimal version and open
<code>editor.xhtml</code> in Firefox. This allows you to check out
Gemse without risk, since Firefox prevents it from accessing your
system. However, because of the same reason, not all features
work.</p>

<h3>Firefox Extension</h3>

<p>You can install Gemse as a Firefox extension, if you have at least
Firefox 3. This works as easy as for all Firefox extensions, you can
directly install it from Gemse's website.</p>

<p>In order to run Gemse, go to
<code>chrome://gemse/content/editor.xhtml</code>. If you want to read
the documentation, use the command <kbd>:help</kbd> or go to
<code>chrome://gemse/content/editor.xhtml</code>.</p>

<p>Running as an extension, Gemse can access your file system, so you
can load and save files on your filesystem. Gemse also provides an
overlay for the browser. When you open the context menu on a website,
you can select the new entry "open in Gemse". If you do that on a
MathML element, it gets opened in Gemse. If you do it on a selection,
all selected MathML elements get opened in Gemse, including the ones
that are only partially selected. If you do it on an element that is
not part of an equation, All MathML elements that it contains are
loaded.</p>

<h3>XULRunner</h3>

<p>If you do not like Firefox or you want to have Gemse separated from
Firefox, you can run it as a XULRunner application. Just download the
XULRunner version from Gemse's website, unzip it in an empty folder
and run <code>xulrunner-1.9 application.ini</code>.</p>

<p>Running Gemse as XULRunner application, it can access your file
system, so you can save and load files from your filesystem.</p>

<h3>For developers</h3>

<p>If you want to modify Gemse, you can also download the source
package which contains Gemse in a directory structure as I use it for
development. The directory <code>src_common</code> contains the main code
and documentation. <code>src_FirefoxExtension</code> and
<code>src_XULRunner</code> contain files only needed by the Firefox
extension or the XULRunner application respectively. The
<code>test_*</code> directories contain symbolic links to the
<code>src_*</code> directories. In
<code>test_XULRunnerApplication</code> you can run <code>xulrunner-1.9
application.ini</code>. <code>test_FirefoxExtension</code> can be used
as a firefox extension directly. For this you can create a text file
called <code>Gemse@andonyar.com</code>
in the extension folder of your Firefox profile directory, which
contains the full path to the <code>test_FireforxExtension</code>
directory. After restarting Firefox, the Gemse extension should be
installed. Like this, you can modify Gemse and see the changes
directly in Firefox, without removing, repackageing and reinstalling
the extension.</p>

<h2>Author</h2>

<p>The author of Gemse is Urs Holzer, you can contact him via
<a href="mailto:urs@andonyar.com">urs@andonyar.com</a>.</p>

</body>

</html>
