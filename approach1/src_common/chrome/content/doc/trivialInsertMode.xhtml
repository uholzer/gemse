<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE html [
  <!ENTITY  enter  "↵">
  <!ENTITY  esc    "ESC">
  <!ENTITY  ctrl   "CRTL+">
  <!ENTITY  alt    "ALT+">
  <!ENTITY  space  "␣">
]>

<html
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:internal="http://www.andonyar.com/rec/2008-12/gemse/internalns"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xml:lang="en"
    internal:function="documentation"
>

<head>
    <title>Trivial Insert Mode</title>
    <link rel="stylesheet" href="../gemse.css" type="text/css" />
    <script src="../const.js"/>
    <script src="../trivialInsertMode.js"/>
    <script src="../trivialInsertMode_commandTable.js"/>
    <script src="commandListProcessing.js"/>
</head>

<body onload="modeCommands = trivialInsertModeCommands; doc_init()">

<h1>Trivial Insert Mode</h1>

<h2>Introduction</h2>

<p>The trivial insert mode works like this: First you have to tell
what element you want, then you can enter its content. When you are
done with the content, you can usually let the cursor jump behind the
element. In this way, you enter an expression in a depth first
manner. Okay, this sounds a little bit esoterically.</p>

<p>Elements like <code>mi</code>, <code>mo</code>, <code>mn</code>
that contain text directly can be usually created in two ways. One way
is to create an element with one character as content:
For example
<kbd><internal:cmdph ref="trivialInsertModeCommand_mi" select="b.argument=='characters'"/></kbd>
is used to create an <code>mi</code> element. Now you need to enter
the character which will be the content and the element will be
created immediately and the cursor placed behind it. So, for example
<kbd><internal:cmdph ref="trivialInsertModeCommand_mi" select="b.argument=='characters'"/>α</kbd>
enters an <code>mi</code> element containing α.
The second way is to create an element with more than one character.
For example 
<kbd><internal:cmdph ref="trivialInsertModeCommand_mi" select="b.argument=='newlineTerminated'"/>sin&enter;</kbd>
creates an <code>mi</code> element containing <code>sin</code>.</p>

<p>Elements that actually can have children are treated differently.
As soon as you hit the corresponding command, they get created
immediately. For those that have a fixed amount of children, as many
placeholder elements get inserted. For the others, one placeholder
gets inserted. The cursor is placed in front of the first placeholder.
When you enter a next element, it will replace the placeholder. If you are
done inserting the children for this element, you can hit
<kbd><internal:cmdph ref="trivialInsertModeCommand_cursorJump"/></kbd>. 
This causes the cursor to be placed behind the element whose content you
are inserting.</p>


<div id="commands">
<h2>Commands</h2>

<table>
<thead><tr><th>Command</th><th>title</th><th>Function name</th></tr></thead>
<tbody id="commandTableBody">

</tbody>
</table>

<div class="commandDocumentation" id="trivialInsertModeCommand_mi">
    <h3 class="commandTitle">Identifier</h3>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mo">
    <h3 class="commandTitle">Operator</h3>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mn">
    <h3 class="commandTitle">Number</h3>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mtext">
    <h3 class="commandTitle">mtext</h3>

    <p>Inserts an <code>mtext</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mrow">
    <h3 class="commandTitle">mrow</h3>

    <p>Inserts an <code>mrow</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_none">
    <h3 class="commandTitle">none</h3>

    <p>Inserts a <code>none</code> element. This is used only inside
    an <code>mmultiscript</code> element, designating an empty
    script.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mfrac">
    <h3 class="commandTitle">mfrac</h3>

    <p>Inserts an <code>mfrac</code> element, a fraction.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_msub">
    <h3 class="commandTitle">msub</h3>

    <p>Inserts an <code>msub</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_msup">
    <h3 class="commandTitle">msup</h3>

    <p>Inserts an <code>msup</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_msubsup">
    <h3 class="commandTitle">msubsup</h3>

    <p>Inserts an <code>msubsup</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_msqrt">
    <h3 class="commandTitle">msqrt</h3>

    <p>Inserts a <code>msqrt</code> element, a square root.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mroot">
    <h3 class="commandTitle">mroot</h3>

    <p>Inserts a <code>mroot</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_munder">
    <h3 class="commandTitle">munder</h3>

    <p>Inserts a <code>munder</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mover">
    <h3 class="commandTitle">mover</h3>

    <p>Inserts a <code>mover</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_munderover">
    <h3 class="commandTitle">munderover</h3>

    <p>Inserts a <code>munderover</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_menclose">
    <h3 class="commandTitle">menclose</h3>

    <p>Inserts a <code>menclose</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mfenced">
    <h3 class="commandTitle">mfenced</h3>

    <p>Inserts a <code>mfenced</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mmultiscripts">
    <h3 class="commandTitle">mmultiscripts</h3>

    <p>Inserts a <code>mmultiscripts</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mprescripts">
    <h3 class="commandTitle">mprescripts</h3>

    <p>Inserts a <code>mprescripts</code> element. This element is
    only used as child of an <code>mmultiscripts</code> element. It
    signifies that all elements that follow it are to be interpreded
    as prescripts.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mphantom">
    <h3 class="commandTitle">mphantom</h3>

    <p>Inserts a <code>mphantom</code> element. This element hides its
    contents but uses the space anyway.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_table">
    <h3 class="commandTitle">table</h3>

    <p>This command can insert various table elements, depending on
    the element the cursor lies in. If it is located in an
    <code>mtable</code> element, it creates an <code>mtr</code>
    element, i.e. a table row. If it is located in a row, it creates
    an <code>mtd</code> element, a table cell. Otherwise, it creates
    always an <code>mtable</code> element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_mlabeledtr">
    <h3 class="commandTitle">mlabeledtr</h3>

    <p>If you need a labeled row in a table, use this comand.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_notation_prototype">
    <h3 class="commandTitle">Notation: prototype</h3>

    <p>Inserts a <code>prototype</code> element in the OMDoc
    namespace. This is a child of the <code>notation</code>
    element. It contains a pattern which is matched against the
    expression.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_notation_rendering">
    <h3 class="commandTitle">Notation: rendering</h3>

    <p>Inserts a <code>rendering</code> element in the OMDoc
    namespace. This is a child of the <code>notation</code>
    element. It describes how an expression to which this notation
    definition is applied has to be rendered.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_notation_iterate">
    <h3 class="commandTitle">Notation: iterate</h3>

    <p>Inserts an <code>iterate</code> element in the OMDoc
    namespace. It is used inside a <code>rendering</code> in order to
    loop over an expression list as defined in the prototype.</p>

    <p>As an argument, the name of the <code>exprlist</code> from the
    prototype has to be provided.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_notation_separator">
    <h3 class="commandTitle">Notation: separator</h3>

    <p>Inserts a <code>separator</code> element in the OMDoc
    namespace. It is used inside an <code>iterate</code>.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_notation_render">
    <h3 class="commandTitle">Notation: render</h3>

    <p>Inserts a <code>render</code> element in the OMDoc
    namespace. It is used inside a <code>rendering</code>
    element. It causes an argument from the prototype to be rendered
    using a suitable notation definition.</p>

    <p>As an argument, the name of the <code>expr</code> from the
    prototype has to be provided.</p>
</div>


<div class="commandDocumentation" id="trivialInsertModeCommand_oneMoreToSurround">
    <h3 class="commandTitle">one more to surround</h3>

    <p>Selects one sibling more to the left to surround. If you
    insert a new element later on, the selection will become part of
    it, the new element will surround what is selected, so to say.</p>

    <p>If you have selected some elements and you insert an mrow
    element or an element that acts as an inferred mrow, the selected
    elements become children of the new one. If you insert an element with
    a fixed numer of children (for example an <code>mfrac</code>) or an
    element which treates its children as a list (for example
    <code>mfenced</code>) and you have selected more than one element,
    the selected elements are put in an mrow which
    then becomes child of the new element. If you have selected one
    element, no mrow is used, it directly becomes the first child of
    the element you insert. For other elements, the
    selection is simply dropped.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_oneLessToSurround">
    <h3 class="commandTitle">one less to surround</h3>

    <p>Removes the selection of the leftmost selected element.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_cursorJump">
    <h3 class="commandTitle">Let cursor jump</h3>

    <p>When you insert an element that can have children, the cursor
    is automatically into it. When you are done inserting the children
    you need, you can use this command to move the cursor out again, right
    behind the element so you can insert siblings.</p>
</div>

<div class="commandDocumentation" id="trivialInsertModeCommand_exit">
    <h3 class="commandTitle">Exit mode</h3>

    <p>Terminates the insert mode.</p>
</div>

</div>
</body>
</html>
